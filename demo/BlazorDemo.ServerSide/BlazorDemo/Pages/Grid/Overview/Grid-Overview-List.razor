@using BlazorDemo.Data.Issues
@inject IssuesDataService IssuesDataService

<DxGrid @ref="Grid"
        Data="@DataSource"
        ShowGroupPanel="true"
        ShowFilterRow="true"
        TextWrapEnabled="false"
        AutoExpandAllGroupRows="true"
        PagerNavigationMode="PagerNavigationMode.InputBox"
        PageSizeSelectorVisible="true"
        PageSizeSelectorAllRowsItemVisible="true"
        PageSizeSelectorItems="@(new int[] { 5,10,20 })"
        CustomizeFilterRowEditor="Grid_CustomizeFilterRowEditor"
        SizeMode="@SizeMode" KeyboardNavigationEnabled="KeyboardNavigationEnabled">
    <Columns>
        <DxGridDataColumn FieldName="Type" Caption=" " Width="50px" MinWidth="50" TextAlignment="GridTextAlignment.Center" AllowGroup="false" AllowSort="false" FilterRowEditorVisible="false">
            <CellDisplayTemplate>
                @GetIssueTypeIconHtml((context.DataItem as Issue).Type)
            </CellDisplayTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="Name" Caption="Subject" MinWidth="220" AllowGroup="false">
            <CellDisplayTemplate>
                <button class="btn btn-link grid-btn-link" @onclick="() => GotoDetailsViewClick((Issue)context.DataItem)">@context.DisplayText</button>
            </CellDisplayTemplate>
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="ProjectID" Caption="Project" GroupIndex="0" Width="220px">
            <EditSettings>
                <DxComboBoxSettings Data="ProjectList" ValueFieldName="ID" TextFieldName="Name" FilteringMode="DataGridFilteringMode.Contains" />
            </EditSettings>
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="CreatorID" Caption="Owner" Width="140px" MinWidth="100">
            <EditSettings>
                <DxComboBoxSettings Data="UserList" ValueFieldName="ID" TextFieldName="FullName" FilteringMode="DataGridFilteringMode.Contains" />
            </EditSettings>
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="OwnerID" Caption="Assignee" Width="140px" MinWidth="100">
            <EditSettings>
                <DxComboBoxSettings Data="UserList" ValueFieldName="ID" TextFieldName="FullName" FilteringMode="DataGridFilteringMode.Contains" />
            </EditSettings>
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="Status" Caption="Status" Width="140px" MinWidth="140" TextAlignment="GridTextAlignment.Left">
            <EditSettings>
                <DxComboBoxSettings Data="StatusList" />
            </EditSettings>
        </DxGridDataColumn>
        <DxGridDataColumn FieldName="CreatedDate" Caption="Created" Width="120px" MinWidth="120" />
        <DxGridDataColumn FieldName="ModifiedDate" Caption="Modified" Width="120px" MinWidth="120" />
        <DxGridDataColumn FieldName="FixedDate" Caption="Fixed" Width="120px" MinWidth="120" />
        <DxGridDataColumn FieldName="Priority" Caption=" " Width="90px" TextAlignment="GridTextAlignment.Center" AllowGroup="false" AllowSort="false">
            <FilterRowCellTemplate Context="filterContext">
                <DxButton RenderStyle="ButtonRenderStyle.Link" CssClass="p-0 w-100" Enabled="IsGridFiltered()" Click="@(() => Grid.ClearFilter())">Clear</DxButton>
            </FilterRowCellTemplate>
            <CellDisplayTemplate>
                @GetIssuePriorityIconHtml((context.DataItem as Issue).Priority)
            </CellDisplayTemplate>
        </DxGridDataColumn>
    </Columns>
    <GroupSummary>
        <DxGridSummaryItem FieldName="ID" SummaryType="GridSummaryItemType.Count" />
    </GroupSummary>
    <TotalSummary>
        <DxGridSummaryItem FieldName="ID" SummaryType="GridSummaryItemType.Count" FooterColumnName="Name" />
    </TotalSummary>
</DxGrid>

@code {
    IGrid Grid;
    IEnumerable<Issue> DataSource { get; set; }
    IEnumerable<Project> ProjectList { get; set; }
    IEnumerable<User> UserList { get; set; }
    static List<IssueStatus?> StatusList { get; set; } = ((IssueStatus[])Enum.GetValues(typeof(IssueStatus))).Cast<IssueStatus?>().ToList();

    [Parameter]
    public SizeMode SizeMode { get; set; }
    [Parameter]
    public bool KeyboardNavigationEnabled { get; set; }
    [Parameter]
    public EventCallback<Issue> GotoDetailsView { get; set; }

    async Task GotoDetailsViewClick(Issue issue) {
        await GotoDetailsView.InvokeAsync(issue);
    }

    protected override async Task OnInitializedAsync() {
        ProjectList = (await IssuesDataService.GetProjectsAsync())
            .OrderBy(i => i.Name)
            .ToList();
        UserList = (await IssuesDataService.GetUsersAsync())
            .OrderBy(i => i.FullName)
            .ToList();
        DataSource = await IssuesDataService.GetIssuesAsync();
    }

    void Grid_CustomizeFilterRowEditor(GridCustomizeFilterRowEditorEventArgs e) {
        if(e.FieldName == "CreatedDate" || e.FieldName == "ModifiedDate" || e.FieldName == "FixedDate")
            ((ITextEditSettings)e.EditSettings).ClearButtonDisplayMode = DataEditorClearButtonDisplayMode.Never;
    }

    public MarkupString GetIssuePriorityIconHtml(IssuePriority priority) {
        string priorytyClass = "warning";
        string title = "Medium";
        if(priority == IssuePriority.High) {
            priorytyClass = "danger";
            title = " High ";
        }
        if(priority == IssuePriority.Low) {
            priorytyClass = "info";
            title = " Low ";
        }
        string html = string.Format("<span class='badge bg-{0} py-1 px-2' title='{1} Priority'>{1}</span>", priorytyClass, title);
        return new MarkupString(html);
    }
    public MarkupString GetIssueTypeIconHtml(IssueType type) {
        string html = "";
        if(type == IssueType.Bug)
            html = "<span class='badge bg-danger py-1 px-2' title='Bug'>B</span>";
        return new MarkupString(html);
    }
    public bool IsGridFiltered() {
        return !object.ReferenceEquals(Grid.GetFilterCriteria(), null);
    }
}
